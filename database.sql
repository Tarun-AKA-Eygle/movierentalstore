DROP TABLE DISTRI_PHONE;

DROP TABLE DISTRIBUTOR;

CREATE TABLE DISTRIBUTOR (DNAME VARCHAR(35) PRIMARY KEY,ADDRESS VARCHAR(50));

CREATE TABLE DISTRI_PHONE (DNAME VARCHAR(35),PHONE BIGINT);

ALTER TABLE DISTRI_PHONE ADD CONSTRAINT DIS_PHN_FK FOREIGN KEY (DNAME) REFERENCES DISTRIBUTOR(DNAME);

CREATE OR REPLACE PROCEDURE ADD_DISTRI (NAMED character varying ,ADDR character varying ,PH1 BIGINT)

LANGUAGE SQL

AS $$

INSERT INTO DISTRIBUTOR VALUES (NAMED, ADDR);
INSERT INTO DISTRI_PHONE VALUES (NAMED,PH1);
$$;

CALL ADD_DISTRI('Blockdistributor','Koperkhairane',1234567890);

CREATE OR REPLACE PROCEDURE DEL_DISTRI (NAMED character varying)
LANGUAGE SQL
AS $$

DELETE FROM DISTRI_PHONE WHERE DNAME = NAMED;
DELETE FROM DISTRIBUTOR WHERE DNAME = NAMED;
$$;

CREATE OR REPLACE PROCEDURE UPD_DISTRI (NAMED character varying,ADDR character varying ,PH1 BIGINT)
LANGUAGE SQL
AS $$

UPDATE DISTRIBUTOR SET ADDRESS = ADDR WHERE DNAME = NAMED;
UPDATE DISTRI_PHONE SET PHONE=PH1 WHERE DNAME = NAMED;
$$;

-- *********************************STORE ENTITY*************************

DROP TABLE ST_PHONE;

DROP TABLE STORE;

CREATE TABLE STORE (STORE_ID SMALLSERIAL PRIMARY KEY NOT NULL,SNAME VARCHAR(25),ADDRESS VARCHAR(50),DNAME VARCHAR(25));

CREATE TABLE ST_PHONE (STORE_ID SMALLSERIAL NOT NULL,PH BIGINT);

ALTER TABLE ST_PHONE ADD CONSTRAINT ST_PHN_FK FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID);

-- ********************************************************************

CREATE OR REPLACE PROCEDURE ADD_STORE (NAMES IN STORE.SNAME%TYPE ,ADDR IN STORE.ADDRESS%TYPE,NAMED IN STORE.DNAME%TYPE ,PH1 IN ST_PHONE.PH%TYPE)

LANGUAGE SQL

AS $$

INSERT INTO STORE (SNAME,ADDRESS,DNAME) VALUES (NAMES,ADDR,NAMED);
INSERT INTO ST_PHONE (PH) VALUES (PH1);
$$;

CREATE OR REPLACE PROCEDURE DEL_STORE (ID IN STORE.STORE_ID%TYPE)

LANGUAGE SQL

AS $$

DELETE FROM ST_PHONE WHERE STORE_ID=ID;
DELETE FROM STORE WHERE STORE_ID=ID;

$$;

CREATE OR REPLACE PROCEDURE UPD_STORE (ID IN STORE.STORE_ID%TYPE, NAMES IN STORE.SNAME%TYPE ,ADDR IN STORE.ADDRESS%TYPE,NAMED IN STORE.DNAME%TYPE ,PH1 IN ST_PHONE.PH%TYPE)

LANGUAGE SQL

AS $$

UPDATE STORE SET SNAME=NAMES,ADDRESS=ADDR,DNAME=NAMED WHERE STORE_ID=ID;
UPDATE ST_PHONE SET PH=PH1 WHERE STORE_ID=ID;
$$;

-- ****************************EMPLOYEES ENTITY**********************************


DROP TABLE EM_PHONE;

DROP TABLE EMPLOYEES;

CREATE TABLE EMPLOYEES (SIN INTEGER PRIMARY KEY NOT NULL,ENAME VARCHAR(35),ADDRESS VARCHAR(50),DOB VARCHAR(35),DOJ VARCHAR(35),STORE_ID INTEGER,SALARY INTEGER, EMAIL VARCHAR(100) NOT NULL, PASSWORD VARCHAR(100) NOT NULL,UNIQUE (EMAIL));

CREATE TABLE EM_PHONE (SIN INTEGER NOT NULL,PH BIGINT);

ALTER TABLE EM_PHONE ADD CONSTRAINT EM_PHN_FK FOREIGN KEY (SIN) REFERENCES EMPLOYEES(SIN);

-- **************************************************************

CREATE OR REPLACE PROCEDURE ADD_EMP (SIN INTEGER,NAMEE character varying ,ADDR character varying,BIR character varying,JOI character varying,ID INTEGER,SAL INTEGER,EML IN EMPLOYEES.EMAIL%TYPE,PAS IN EMPLOYEES.PASSWORD%TYPE,PH1 IN EM_PHONE.PH%TYPE)

LANGUAGE SQL

AS $$

INSERT INTO EMPLOYEES VALUES (SIN,NAMEE,ADDR,BIR,JOI,ID,SAL,EML,PAS);
INSERT INTO EM_PHONE VALUES (SIN,PH1);
$$;
CALL ADD_EMP ('1010','Tarun','VASHI','1-23-12','1-23-12','1',50000,'TarunSharma@gmail.com','$2b$10$v58OEMwCo0n2vEXrUOwS7OBuFKE69Y0YXRBBAUsGDiSiupZukmvia',9022747122);


-- *************************************************************

CREATE OR REPLACE PROCEDURE DEL_EMP (SIN INTEGER)

LANGUAGE SQL

AS $$

DELETE FROM EM_PHONE WHERE SIN=SIN;
DELETE FROM EMPLOYEES WHERE SIN=SIN;

$$;

-- **************************************************

CREATE OR REPLACE PROCEDURE UPD_EMP (SIN INTEGER,NAMEE character varying ,ADDR character varying,BIR character varying,JOI character varying,ID INTEGER,SAL IN EMPLOYEES.SALARY%TYPE,EML character varying,PAS character varying ,PH1 IN EM_PHONE.PH%TYPE)

LANGUAGE SQL

AS $$

UPDATE EMPLOYEES SET ENAME=NAMEE,ADDRESS=ADDR,DOB=BIR,DOJ=JOI,STORE_ID=ID,SALARY=SAL,EMAIL=EML,PASSWORD=PAS WHERE SIN=SIN;
UPDATE EM_PHONE SET PH=PH1 WHERE SIN=SIN;
$$;

-- password = Password
DROP TABLE SUPERVISORS;
CREATE TABLE SUPERVISORS( SIN INTEGER PRIMARY KEY NOT NULL);
INSERT INTO SUPERVISORS (SIN) VALUES (1010);

-- *************************CUSTOMER ENTITY*************************************


DROP TABLE CUS_PHONE;

DROP TABLE CUSTOMERS;

CREATE TABLE CUSTOMERS (CUS_ID SMALLSERIAL PRIMARY KEY NOT NULL,CNAME VARCHAR(35),ADDRESS VARCHAR(50));

CREATE TABLE CUS_PHONE (CUS_ID SMALLSERIAL NOT NULL,PH BIGINT);

ALTER TABLE CUS_PHONE ADD CONSTRAINT CUS_PHN_FK FOREIGN KEY (CUS_ID) REFERENCES CUSTOMERS(CUS_ID);

-- **************************************************************

CREATE OR REPLACE PROCEDURE ADD_CUS (NAMEC character varying ,ADDR character varying,PH1 IN CUS_PHONE.PH%TYPE)

LANGUAGE SQL

AS $$

INSERT INTO CUSTOMERS (CNAME,ADDRESS) VALUES (NAMEC,ADDR);
INSERT INTO CUS_PHONE (PH) VALUES (PH1);
$$;
CALL ADD_CUS ('DRACO','KOPERKHAIRANE',9022747122);

CREATE OR REPLACE PROCEDURE DEL_CUS (ID integer)

LANGUAGE SQL

AS $$

DELETE FROM CUS_PHONE WHERE CUS_ID=ID;
DELETE FROM CUSTOMERS WHERE CUS_ID=ID;

$$;

CREATE OR REPLACE PROCEDURE UPD_CUS (ID integer,NAMEC character varying ,ADDR character varying,PH1 IN CUS_PHONE.PH%TYPE)

LANGUAGE SQL

AS $$

UPDATE CUSTOMERS SET CNAME=NAMEC,ADDRESS=ADDR WHERE CUS_ID=ID;
UPDATE CUS_PHONE SET PH=PH1 WHERE CUS_ID=ID;
$$;

-- ***********************TAPE ENTITY********************************

drop table movies;
drop table tapes;
CREATE TABLE TAPES(TAPE_ID SMALLSERIAL PRIMARY KEY NOT NULL,STOCK SMALLINT,PRICE SMALLINT,STORE_ID SMALLINT);
CREATE TABLE MOVIES(TAPE_ID SMALLSERIAL NOT NULL,TITLE VARCHAR(50),DIRECTOR VARCHAR(50),DESCRIPTION VARCHAR(50),GENRE VARCHAR(10),RATING SMALLINT,NOS VARCHAR(50));

ALTER TABLE MOVIES ADD CONSTRAINT MOVIE_FK FOREIGN KEY (TAPE_ID) REFERENCES TAPES(TAPE_ID);



CREATE OR REPLACE PROCEDURE ADD_TAPE (STK integer,PR integer,SID integer,TIT character varying,DIR character varying,DES character varying,GEN character varying,RAT integer,STR character varying)

LANGUAGE SQL

AS $$

INSERT INTO TAPES (STOCK,PRICE,STORE_ID) VALUES (STK,PR,SID);
INSERT INTO MOVIES (TITLE,DIRECTOR,DESCRIPTION,GENRE,RATING,NOS) VALUES (TIT,DIR,DES,GEN,RAT,STR);

$$;

CALL ADD_TAPE (100,399,1,'Philosophers Stone','Chris Columbus','A Boy who became a wizard','Fantasy',10,'Daniel Jacob Radcliffe');



-- **********************************************************

CREATE OR REPLACE PROCEDURE DEL_TAPE (TPID integer)

LANGUAGE SQL

AS $$

DELETE FROM MOVIES WHERE TAPE_ID=TPID;
DELETE FROM TAPES WHERE TAPE_ID=TPID;

$$;



-- ************************************************************

CREATE OR REPLACE PROCEDURE UPD_TAPE (TPID integer,STK integer,PR integer,SID integer,TIT character varying,DIR character varying,DES character varying,GEN character varying,RAT integer,STR character varying)

LANGUAGE SQL

AS $$

UPDATE TAPES SET STOCK=STK,PRICE=PR,STORE_ID=SID WHERE TAPE_ID = TPID;
UPDATE MOVIES SET TITLE=TIT,DIRECTOR=DIR,GENRE=GEN,RATING=RAT,NOS=STR WHERE TAPE_ID = TPID;

$$;



-- *****************************RENTAL ENTITY**************************************
DROP TABLE RENTALS;

CREATE TABLE RENTALS(RENTAL_ID SMALLSERIAL PRIMARY KEY,TAPE_ID INTEGER,STATUS VARCHAR(20),CUS_ID INTEGER,SIN INTEGER,RENTON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);

-- ******************************************************************

CREATE OR REPLACE PROCEDURE ADD_RENTAL(TPID INTEGER,STA character varying,CID INTEGER,EID INTEGER)

LANGUAGE SQL

AS $$

INSERT INTO RENTALS (TAPE_ID,STATUS,CUS_ID,SIN) VALUES (TPID,STA,CID,EID);

$$;

-- CALL ADD_RENTAL(1,'PENDING',1,101);

-- ********************************************************

CREATE OR REPLACE PROCEDURE UPD_RENTAL(RID INTEGER,TPID INTEGER,STA character varying,CID INTEGER,EID INTEGER)

LANGUAGE SQL

AS $$

UPDATE RENTALS SET TAPE_ID=TPID,STATUS=STA,CUS_ID=CID,SIN=EID,RENTON= CURRENT_TIMESTAMP WHERE RENTAL_ID=RID;

$$;

-- CALL UPD_RENTAL(1,1,'COMPLETE',1,102);

-- ************************************************************

CREATE OR REPLACE PROCEDURE DEL_RENTAL(RID INTEGER)

LANGUAGE SQL

AS $$

DELETE FROM RENTALS WHERE RENTAL_ID=RID;

$$;

-- CALL DEL_RENTAL(1);